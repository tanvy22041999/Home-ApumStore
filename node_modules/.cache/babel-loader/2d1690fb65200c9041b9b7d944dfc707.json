{"ast":null,"code":"import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ReviewActions, { ReviewActionTypes } from \"../actions/review\";\nimport { getAllProductReview, getAProductReview, addReview, updateReview } from \"../apis/review\";\n\nfunction* handleGetList({\n  payload\n}) {\n  try {\n    const result = yield call(getAllProductReview, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onGetListSuccess(data.reviews, data.total, data.count));\n  } catch (error) {\n    yield put(ReviewActions.onGetListError(error));\n  }\n}\n\nfunction* handleGetDetail({\n  payload\n}) {\n  try {\n    const result = yield call(getAProductReview, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onGetDetailSuccess(data.review));\n  } catch (error) {\n    yield put(ReviewActions.onGetDetailError(error));\n  }\n}\n\nfunction* handleCreate({\n  payload\n}) {\n  try {\n    const result = yield call(addReview, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 201) throw data;\n    yield put(ReviewActions.onCreateSuccess(data));\n  } catch (error) {\n    yield put(ReviewActions.onCreateError(error));\n  }\n}\n\nfunction* handleUpdate({\n  payload\n}) {\n  try {\n    const result = yield call(updateReview, payload.id, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onUpdateSuccess(data.review));\n    yield put(ReviewActions.onGetList(payload.params));\n  } catch (error) {\n    yield put(ReviewActions.onUpdateError(error));\n  }\n}\n/**\n *\n */\n\n\nexport function* watchGetList() {\n  yield takeEvery(ReviewActionTypes.GET_LIST, handleGetList);\n}\nexport function* watchGetDetail() {\n  yield takeEvery(ReviewActionTypes.GET_DETAIL, handleGetDetail);\n}\nexport function* watchCreate() {\n  yield takeEvery(ReviewActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ReviewActionTypes.UPDATE, handleUpdate);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchGetList), fork(watchGetDetail), fork(watchCreate), fork(watchUpdate)]);\n}","map":{"version":3,"sources":["/Users/vyduong/Desktop/DOChoi_FE/WebBanDienThoai-master 2/FE_WebBanDienThoai/src/redux/sagas/review.js"],"names":["takeEvery","fork","all","call","put","get","ReviewActions","ReviewActionTypes","getAllProductReview","getAProductReview","addReview","updateReview","handleGetList","payload","result","data","code","onGetListSuccess","reviews","total","count","error","onGetListError","handleGetDetail","onGetDetailSuccess","review","onGetDetailError","handleCreate","onCreateSuccess","onCreateError","handleUpdate","id","onUpdateSuccess","onGetList","params","onUpdateError","watchGetList","GET_LIST","watchGetDetail","GET_DETAIL","watchCreate","CREATE","watchUpdate","UPDATE","rootSaga"],"mappings":"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","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ReviewActions, { ReviewActionTypes } from \"../actions/review\";\nimport { getAllProductReview, getAProductReview, addReview, updateReview } from \"../apis/review\";\n\nfunction* handleGetList({payload}) {\n  try {\n    const result = yield call(getAllProductReview, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onGetListSuccess(data.reviews, data.total, data.count));\n  } catch (error) {\n    yield put(ReviewActions.onGetListError(error));\n  }\n}\n\nfunction* handleGetDetail({payload}) {\n  try {\n    const result = yield call(getAProductReview, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onGetDetailSuccess(data.review));\n  } catch (error) {\n    yield put(ReviewActions.onGetDetailError(error));\n  }\n}\n\nfunction* handleCreate({ payload }) {\n  try {\n    const result = yield call(addReview, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 201) throw data;\n    yield put(ReviewActions.onCreateSuccess(data));\n  } catch (error) {\n    yield put(ReviewActions.onCreateError(error));\n  }\n}\n\nfunction* handleUpdate({ payload }) {\n  try {\n    const result = yield call(updateReview, payload.id, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(ReviewActions.onUpdateSuccess(data.review));\n    yield put(ReviewActions.onGetList(payload.params))\n  } catch (error) {\n    yield put(ReviewActions.onUpdateError(error));\n  }\n}\n\n/**\n *\n */\n\nexport function* watchGetList() {\n  yield takeEvery(ReviewActionTypes.GET_LIST, handleGetList);\n}\nexport function* watchGetDetail() {\n  yield takeEvery(ReviewActionTypes.GET_DETAIL, handleGetDetail);\n}\nexport function* watchCreate() {\n  yield takeEvery(ReviewActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ReviewActionTypes.UPDATE, handleUpdate);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetList),\n    fork(watchGetDetail),\n    fork(watchCreate),\n    fork(watchUpdate),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}