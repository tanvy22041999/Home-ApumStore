{"ast":null,"code":"import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport GroupActions, { GroupActionTypes } from \"../actions/group\";\nimport { getProductGroup } from \"../apis/group\";\n\nfunction* handleGetDetail({\n  id\n}) {\n  try {\n    const result = yield call(getProductGroup, id);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(GroupActions.onGetDetailSuccess(data.group));\n  } catch (error) {\n    yield put(GroupActions.onGetDetailError(error));\n  }\n}\n/**\n *\n */\n\n\nexport function* watchGetDetail() {\n  yield takeEvery(GroupActionTypes.GET_DETAIL, handleGetDetail);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchGetDetail)]);\n}","map":{"version":3,"sources":["/Users/vyduong/Desktop/DOChoi_FE/WebBanDienThoai-master 2/FE_WebBanDienThoai/src/redux/sagas/group.js"],"names":["takeEvery","fork","all","call","put","get","GroupActions","GroupActionTypes","getProductGroup","handleGetDetail","id","result","data","code","onGetDetailSuccess","group","error","onGetDetailError","watchGetDetail","GET_DETAIL","rootSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,YAAP,IAAuBC,gBAAvB,QAA+C,kBAA/C;AACA,SAASC,eAAT,QAAgC,eAAhC;;AAEA,UAAUC,eAAV,CAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAgC;AAC9B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,eAAD,EAAkBE,EAAlB,CAAzB;AACA,UAAME,IAAI,GAAGP,GAAG,CAACM,MAAD,EAAS,MAAT,CAAhB;AACA,QAAIC,IAAI,CAACC,IAAL,KAAc,GAAlB,EAAuB,MAAMD,IAAN;AACvB,UAAMR,GAAG,CAACE,YAAY,CAACQ,kBAAb,CAAgCF,IAAI,CAACG,KAArC,CAAD,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACE,YAAY,CAACW,gBAAb,CAA8BD,KAA9B,CAAD,CAAT;AACD;AACF;AAGD;AACA;AACA;;;AAEA,OAAO,UAAUE,cAAV,GAA2B;AAChC,QAAMlB,SAAS,CAACO,gBAAgB,CAACY,UAAlB,EAA8BV,eAA9B,CAAf;AACD;AAGD,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAMlB,GAAG,CAAC,CACRD,IAAI,CAACiB,cAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport GroupActions, { GroupActionTypes } from \"../actions/group\";\nimport { getProductGroup } from \"../apis/group\";\n\nfunction* handleGetDetail({id}) {\n  try {\n    const result = yield call(getProductGroup, id);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(GroupActions.onGetDetailSuccess(data.group));\n  } catch (error) {\n    yield put(GroupActions.onGetDetailError(error));\n  }\n}\n\n\n/**\n *\n */\n\nexport function* watchGetDetail() {\n  yield takeEvery(GroupActionTypes.GET_DETAIL, handleGetDetail);\n}\n\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetDetail),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}