{"ast":null,"code":"import { takeEvery, fork, all, call, put, select } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport OrdersActions, { OrdersActionsTypes } from \"../actions/order\";\nimport ProductsActions from \"../actions/products\";\nimport { addOrder, sendConfirmEmail, confirmOrder, getDetailOrder, updateOrder, getAllOrder } from \"../apis/order\";\n/* Notification */\n\nimport io from 'socket.io-client';\nimport NotificationActions from \"../actions/notification\";\nconst socket = io('http://localhost:3000');\n/* Notification */\n\nfunction* handleGetList({\n  payload\n}) {\n  try {\n    const result = yield call(getAllOrder, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onGetListSuccess(data.orders, data.total));\n  } catch (error) {\n    yield put(OrdersActions.onGetListError(error));\n  }\n}\n\nfunction* handleGetDetail({\n  id\n}) {\n  try {\n    const result = yield call(getDetailOrder, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onGetDetailSuccess(data.order));\n  } catch (error) {\n    yield put(OrdersActions.onGetDetailError(error));\n  }\n}\n\nfunction* handleReConfirm({\n  payload\n}) {\n  try {\n    const result = yield call(sendConfirmEmail, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    if (data.message !== \"success\") throw data;\n    yield put(OrdersActions.onSendConfirmEmailSuccess(data));\n  } catch (error) {\n    yield put(OrdersActions.onSendConfirmEmailError(error));\n  }\n}\n/**\n *\n * create\n */\n\n\nfunction* handleCreate({\n  payload\n}) {\n  try {\n    const state = yield select();\n    const result = yield call(addOrder, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 201) throw data;\n    yield put(OrdersActions.onCreateSuccess(data));\n    /* Notification */\n\n    if (payload.payment_method === \"paypal\") {\n      socket.emit('order', {\n        email: data.order.email,\n        order: data.order._id\n      });\n      yield put(NotificationActions.onCreate({\n        name: \"Đơn hàng mới được thanh toán qua Paypal\",\n        image: data.order.user.image,\n        link: data.order._id,\n        type: 0,\n        user: null,\n        content: `${data.order.email} vừa thanh toán và xác nhận thành công`\n      }));\n    }\n    /* Notification */\n\n\n    yield put(ProductsActions.onClearCart({\n      cart: state.cart,\n      checkout: state.checkout\n    }));\n    yield put(ProductsActions.onClearCheckout());\n    const email = yield call(sendConfirmEmail, data.order._id);\n    yield put(OrdersActions.onSendConfirmEmailSuccess(email.data));\n  } catch (error) {\n    yield put(OrdersActions.onCreateError(error));\n  }\n}\n\nfunction* handleConfirmOrder({\n  payload\n}) {\n  try {\n    const result = yield call(confirmOrder, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onConfirmOrderSuccess(data));\n    /* Notification */\n\n    socket.emit('order', {\n      email: data.order.email,\n      order: data.order._id\n    });\n    yield put(NotificationActions.onCreate({\n      name: \"Đơn hàng mới được xác nhận\",\n      image: data.order.user.image,\n      link: data.order._id,\n      type: 0,\n      content: `${data.order.email} vừa xác nhận đặt hàng thành công`\n    }));\n    /* Notification */\n  } catch (error) {\n    yield put(OrdersActions.onConfirmOrderError(error));\n  }\n}\n/**\n *\n * update\n */\n\n/**\n *\n * delete\n */\n\n\nfunction* handleUpdate({\n  payload\n}) {\n  try {\n    const result = yield call(updateOrder, payload.id, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    const detailResult = yield call(getDetailOrder, payload.id);\n    yield put(OrdersActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(OrdersActions.onGetList(payload.params));\n  } catch (error) {\n    yield put(OrdersActions.onUpdateError(error));\n  }\n}\n/**\n *\n */\n\n\nexport function* watchGetList() {\n  yield takeEvery(OrdersActionsTypes.GET_LIST, handleGetList);\n}\nexport function* watchGetDetail() {\n  yield takeEvery(OrdersActionsTypes.GET_DETAIL, handleGetDetail);\n}\nexport function* watchCreate() {\n  yield takeEvery(OrdersActionsTypes.CREATE, handleCreate);\n}\nexport function* watchConfirmOrder() {\n  yield takeEvery(OrdersActionsTypes.CONFIRM_ORDER, handleConfirmOrder);\n}\nexport function* watchReConfirm() {\n  yield takeEvery(OrdersActionsTypes.SEND_CONFIRM_EMAIL, handleReConfirm);\n}\nexport function* watchUpdate() {\n  yield takeEvery(OrdersActionsTypes.UPDATE, handleUpdate);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchGetList), fork(watchGetDetail), fork(watchCreate), fork(watchConfirmOrder), fork(watchReConfirm), fork(watchUpdate)]);\n}","map":{"version":3,"sources":["/Users/vyduong/Documents/Home-ApumStore/src/redux/sagas/order.js"],"names":["takeEvery","fork","all","call","put","select","get","OrdersActions","OrdersActionsTypes","ProductsActions","addOrder","sendConfirmEmail","confirmOrder","getDetailOrder","updateOrder","getAllOrder","io","NotificationActions","socket","handleGetList","payload","result","data","code","onGetListSuccess","orders","total","error","onGetListError","handleGetDetail","id","onGetDetailSuccess","order","onGetDetailError","handleReConfirm","message","onSendConfirmEmailSuccess","onSendConfirmEmailError","handleCreate","state","onCreateSuccess","payment_method","emit","email","_id","onCreate","name","image","user","link","type","content","onClearCart","cart","checkout","onClearCheckout","onCreateError","handleConfirmOrder","onConfirmOrderSuccess","onConfirmOrderError","handleUpdate","detailResult","onUpdateSuccess","onGetList","params","onUpdateError","watchGetList","GET_LIST","watchGetDetail","GET_DETAIL","watchCreate","CREATE","watchConfirmOrder","CONFIRM_ORDER","watchReConfirm","SEND_CONFIRM_EMAIL","watchUpdate","UPDATE","rootSaga"],"mappings":"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","sourcesContent":["import { takeEvery, fork, all, call, put, select } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport OrdersActions, { OrdersActionsTypes } from \"../actions/order\";\nimport ProductsActions from \"../actions/products\";\nimport { addOrder, sendConfirmEmail, confirmOrder, getDetailOrder, updateOrder, getAllOrder } from \"../apis/order\";\n/* Notification */\nimport io from 'socket.io-client';\nimport NotificationActions from \"../actions/notification\";\nconst socket = io('http://localhost:3000');\n/* Notification */\n\nfunction* handleGetList({payload}) {\n  try {\n    const result = yield call(getAllOrder, payload);\n    const data = get(result, \"data\")\n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onGetListSuccess(data.orders, data.total));\n  } catch (error) {\n    yield put(OrdersActions.onGetListError(error));\n  }\n}\n\nfunction* handleGetDetail({id}) {\n  try {\n    const result = yield call(getDetailOrder, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onGetDetailSuccess(data.order));\n  } catch (error) {\n    yield put(OrdersActions.onGetDetailError(error));\n  }\n}\n\nfunction* handleReConfirm({ payload }) {\n  try {\n    const result = yield call(sendConfirmEmail, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    if (data.message !== \"success\") throw data;\n    yield put(OrdersActions.onSendConfirmEmailSuccess(data));\n  } catch (error) {\n    yield put(OrdersActions.onSendConfirmEmailError(error));\n  }\n}\n\n/**\n *\n * create\n */\nfunction* handleCreate({ payload }) {\n  try {\n    const state = yield select()\n    const result = yield call(addOrder, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 201) throw data;\n    yield put(OrdersActions.onCreateSuccess(data));\n    /* Notification */\n    if(payload.payment_method === \"paypal\"){\n      socket.emit('order', { \n        email: data.order.email, \n        order: data.order._id \n      });\n      yield put(NotificationActions.onCreate({\n        name : \"Đơn hàng mới được thanh toán qua Paypal\",\n        image : data.order.user.image,\n        link: data.order._id,\n        type: 0,\n        user: null,\n        content :  `${data.order.email} vừa thanh toán và xác nhận thành công`\n      }))\n    }\n    /* Notification */\n    yield put(ProductsActions.onClearCart({cart: state.cart, checkout: state.checkout}))\n    yield put(ProductsActions.onClearCheckout())\n    const email = yield call(sendConfirmEmail, data.order._id);\n    yield put(OrdersActions.onSendConfirmEmailSuccess(email.data));\n  } catch (error) {\n    yield put(OrdersActions.onCreateError(error));\n  }\n}\n\nfunction* handleConfirmOrder({ payload}) {\n  try {\n    const result = yield call(confirmOrder, payload);\n    const data = get(result, \"data\", {});  \n    if (data.code !== 200) throw data;\n    yield put(OrdersActions.onConfirmOrderSuccess(data));\n    /* Notification */\n    socket.emit('order', { email: data.order.email, order: data.order._id });\n    yield put(NotificationActions.onCreate({\n      name : \"Đơn hàng mới được xác nhận\",\n      image : data.order.user.image,\n      link: data.order._id,\n      type: 0,\n      content :  `${data.order.email} vừa xác nhận đặt hàng thành công`\n    }))\n    /* Notification */\n  } catch (error) {\n    yield put(OrdersActions.onConfirmOrderError(error));\n  }\n}\n\n/**\n *\n * update\n */\n/**\n *\n * delete\n */\nfunction* handleUpdate({ payload }) {\n  try {\n    const result = yield call(updateOrder, payload.id, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    const detailResult = yield call(getDetailOrder, payload.id);\n    yield put(OrdersActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(OrdersActions.onGetList(payload.params))\n  } catch (error) {\n    yield put(OrdersActions.onUpdateError(error));\n  }\n}\n\n/**\n *\n */\nexport function* watchGetList() {\n  yield takeEvery(OrdersActionsTypes.GET_LIST, handleGetList);\n}\nexport function* watchGetDetail() {\n  yield takeEvery(OrdersActionsTypes.GET_DETAIL, handleGetDetail);\n}\nexport function* watchCreate() {\n  yield takeEvery(OrdersActionsTypes.CREATE, handleCreate);\n}\nexport function* watchConfirmOrder() {\n  yield takeEvery(OrdersActionsTypes.CONFIRM_ORDER, handleConfirmOrder);\n}\nexport function* watchReConfirm() {\n  yield takeEvery(OrdersActionsTypes.SEND_CONFIRM_EMAIL, handleReConfirm);\n}\nexport function* watchUpdate() {\n  yield takeEvery(OrdersActionsTypes.UPDATE, handleUpdate);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetList),\n    fork(watchGetDetail),\n    fork(watchCreate),\n    fork(watchConfirmOrder),\n    fork(watchReConfirm),\n    fork(watchUpdate),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}