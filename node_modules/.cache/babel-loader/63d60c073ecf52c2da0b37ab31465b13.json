{"ast":null,"code":"import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport UsersActions, { UsersActionTypes } from \"../actions/user\";\nimport AuthorizationActions from \"../actions/auth\";\nimport { addImage } from \"../apis/cloudinary\";\nimport { updateUserInfo, getUser, changePassword } from \"../apis/user\";\n/**\n *\n * update\n */\n\nfunction* handleUpdate({\n  payload\n}) {\n  const {\n    firstname,\n    lastname,\n    phonenumber,\n    address,\n    email,\n    history\n  } = payload.params;\n  var result,\n      detailResult = null;\n\n  try {\n    if (payload.params.image) {\n      var image = yield call(addImage, payload.params.image);\n      result = yield call(updateUserInfo, {\n        firstname,\n        lastname,\n        phonenumber,\n        address,\n        email,\n        \"image\": image.data.images[0]._id\n      }, payload.id);\n      if (result.data.code !== 200) throw result.data;\n    } else {\n      result = yield call(updateUserInfo, {\n        firstname,\n        lastname,\n        phonenumber,\n        address,\n        email,\n        history\n      }, payload.id);\n      const data = get(result, \"data\", {});\n      if (data.code !== 200) throw data;\n    }\n\n    detailResult = yield call(getUser, payload.id);\n    yield put(UsersActions.onUpdateSuccess(detailResult.data.user));\n    yield put(AuthorizationActions.onGetProfile());\n  } catch (error) {\n    yield put(UsersActions.onUpdateError(error));\n  }\n}\n\nfunction* handleChangePassword({\n  payload\n}) {\n  try {\n    const result = yield call(changePassword, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(UsersActions.onChangePasswordSuccess(data.message));\n  } catch (error) {\n    yield put(UsersActions.onChangePasswordError(error));\n  }\n}\n/**\n *\n */\n\n\nexport function* watchUpdate() {\n  yield takeEvery(UsersActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchChangePassword() {\n  yield takeEvery(UsersActionTypes.CHANGE_PASSWORD, handleChangePassword);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchChangePassword), fork(watchUpdate)]);\n}","map":{"version":3,"sources":["/Users/vyduong/Desktop/DOChoi_FE/WebBanDienThoai-master 2/FE_WebBanDienThoai/src/redux/sagas/user.js"],"names":["takeEvery","fork","all","call","put","get","UsersActions","UsersActionTypes","AuthorizationActions","addImage","updateUserInfo","getUser","changePassword","handleUpdate","payload","firstname","lastname","phonenumber","address","email","history","params","result","detailResult","image","data","images","_id","id","code","onUpdateSuccess","user","onGetProfile","error","onUpdateError","handleChangePassword","onChangePasswordSuccess","message","onChangePasswordError","watchUpdate","UPDATE","watchChangePassword","CHANGE_PASSWORD","rootSaga"],"mappings":"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","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport UsersActions, { UsersActionTypes } from \"../actions/user\";\nimport AuthorizationActions from \"../actions/auth\";\nimport { addImage } from \"../apis/cloudinary\";\nimport { updateUserInfo, getUser, changePassword } from \"../apis/user\";\n\n/**\n *\n * update\n */\nfunction* handleUpdate( {payload} ) {\n  const {firstname, lastname, phonenumber, address, email, history} = payload.params;\n  var result, detailResult = null;\n  try {\n    if(payload.params.image){\n      var image = yield call(addImage, payload.params.image);\n      result = yield call(updateUserInfo,\n      { firstname, lastname, phonenumber, address, email,\n        \"image\": image.data.images[0]._id\n      }, payload.id);\n      if (result.data.code !== 200) throw result.data;\n    }\n    else{\n      result = yield call(updateUserInfo, {firstname, lastname, phonenumber, address, email, history}, payload.id);\n      const data = get(result, \"data\", {});\n      if (data.code !== 200) throw data;\n    }\n    detailResult = yield call(getUser, payload.id);\n    yield put(UsersActions.onUpdateSuccess(detailResult.data.user));\n    yield put(AuthorizationActions.onGetProfile());\n  } catch (error) {\n    yield put(UsersActions.onUpdateError(error));\n  }\n}\n\nfunction* handleChangePassword( {payload} ) {\n  try {\n    const result = yield call(changePassword, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(UsersActions.onChangePasswordSuccess(data.message));\n  } catch (error) {\n    yield put(UsersActions.onChangePasswordError(error));\n  }\n}\n\n/**\n *\n */\nexport function* watchUpdate() {\n  yield takeEvery(UsersActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchChangePassword() {\n  yield takeEvery(UsersActionTypes.CHANGE_PASSWORD, handleChangePassword);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchChangePassword),\n    fork(watchUpdate),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}